buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
}

group 'Localization'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin2js'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


compileKotlin2Js.kotlinOptions.metaInfo = true
compileKotlin2Js.kotlinOptions.outputFile = "${projectDir}/web/js/app.js"
compileKotlin2Js.kotlinOptions.sourceMap = true
compileKotlin2Js.kotlinOptions.main = "call"
compileKotlin2Js.kotlinOptions.suppressWarnings = true
compileKotlin2Js.kotlinOptions.verbose = true
compileKotlin2Js.kotlinOptions.moduleKind = "amd"

kotlinFrontend {
    downloadNodeJsVersion = "latest"

    npm {
//        dependency("kotlin", "1.1.0")
        dependency "style-loader"

        devDependency("karma")
    }

    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
//        mode = 'development'
        mode = 'production'
    }

    define "PRODUCTION", false
    define "X", false

//    rollupBundle {
//        bundleName = "rolledUp"
//    }

//    allBundles {
//        /* set properties for all bundles */
//    }

//    bundle("someBundler") {
//        ....
//    }
}

task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${projectDir}/web"

    dependsOn classes
}

assemble.dependsOn assembleWeb

clean.doFirst {
    delete "${projectDir}/web"

}